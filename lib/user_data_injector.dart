import 'package:cotor/features/auth_service/bloc/auth_service_bloc/auth_service_bloc.dart';
import 'package:cotor/features/user_profile_bloc/user_profile_bloc.dart';
import 'package:cotor/features/view_assignment/bloc/view_assignment_bloc.dart';
import 'package:cotor/injection_container.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class UserDataInjector extends StatelessWidget {
  const UserDataInjector({
    Key key,
    @required this.builder,
  }) : super(key: key);
  final Widget Function(BuildContext, AuthServiceState) builder;

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AuthServiceBloc, AuthServiceState>(
      builder: (context, state) {
        if (state is Authenticated) {
          return MultiBlocProvider(providers: [
            BlocProvider<UserProfileBloc>(
              create: (context) =>
                  sl<UserProfileBloc>()..add(UserEnterHompage()),
            ),
            BlocProvider<ViewAssignmentBloc>(
              create: (context) => sl<ViewAssignmentBloc>(),
            ),
          ], child: builder(context, state));
        } else {
          return builder(context, state);
        }
      },
    );
  }
}
